
const express = require('express');
const cookieParser = require("cookie-parser");
const sessions = require('express-session');
var app = express();
var http = require('http').createServer(app);
var io = require('socket.io')(http);
var md5 = require("md5");
var fs = require('fs');
const http = require('http');
const https = require('https');
const sqlite3 = require('sqlite3').verbose();
const crypto = require('crypto');
const algorithm = 'aes-256-cbc';
const key = "DefyGGDoesNotCareAboutSecureIV12";
const iv = "COUNT-TO-1234567";



bodyParser = require('body-parser');

var accounts = {};

const fivedays = 1000 * 60 * 60 * 24 * 5;

const privateKey = fs.readFileSync('/etc/letsencrypt/live/ctf.pbjar.net/privkey.pem', 'utf8');
const certificate = fs.readFileSync('/etc/letsencrypt/live/ctf.pbjar.net/cert.pem', 'utf8');
const ca = fs.readFileSync('/etc/letsencrypt/live/ctf.pbjar.net/chain.pem', 'utf8');

const credentials = {
  key: privateKey,
  cert: certificate,
  ca: ca
};

//session middleware
app.use(sessions({
    secret: "thisissecretandDefyGGisverycoolajdhbaowihdowaijhd",
    saveUninitialized:true,
    cookie: { maxAge: fivedays },
    resave: false
}));

app.use(cookieParser());

var session;

app.use(bodyParser.urlencoded({ extended: false }));
app.use(express.static(__dirname));
app.set('view engine', "ejs");
let db = new sqlite3.Database('protected/IknowthisisreallyvulnerablebutIdontknowanyotherwaytoprotectourdbthatdoesnottakeanhourtomake.db', sqlite3.OPEN_READWRITE, (err) => {
  if (err) {
    console.error(err.message);
  }
  console.log('Connected to best database ever');
});

function encrypt(text) {
 let cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(key), iv);
 let encrypted = cipher.update(text);
 encrypted = Buffer.concat([encrypted, cipher.final()]);
 return { iv: iv.toString('hex'), encryptedData: encrypted.toString('hex') };
}

function decrypt(text) {
 let iv = Buffer.from(text.iv, 'hex');
 let encryptedText = Buffer.from(text.encryptedData, 'hex');
 let decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(key), iv);
 let decrypted = decipher.update(encryptedText);
 decrypted = Buffer.concat([decrypted, decipher.final()]);
 return decrypted.toString();
}

async function check(user, email){
  var stmt = "select count(*) from users where un=(?);";
  var stmt2 = "select count(*) from users where email=(?);";
  let val=0;
  await new Promise((resolve) => {
    
    db.get(stmt, [user], (err, row) => {
      console.log(row);
      if (row["count(*)"]!==0){
        val=1;
      }
      resolve();
    });
  });

  await new Promise((resolve) => {
    db.get(stmt2, [email], (err, row) => {
      if (row["count(*)"]!==0){
        val=1;
      }
      resolve();
    });
  });
  return val;
}

async function check2(user, pwd){
  var stmt = "select * from users where un=(?);";
  let val=0;
  await new Promise((resolve) => {
    db.get(stmt, [user], (err, row) => {
      if (row===undefined || row["pass"]!==md5(pwd)){
        val=1;
      }
      resolve();
    });
  });
  return val;
}

async function gettoken(user){
  var stmt = "select * from users where un=(?);";
  let val="";
  await new Promise((resolve) => {
    db.get(stmt, [user], (err, row) => {
      val=row["token"];
      resolve();
    });
  });
  return val;
}
async function getreferals(user){
  var stmt = "select * from users where un=(?);";
  let val="";
  await new Promise((resolve) => {
    db.get(stmt, [user], (err, row) => {
      val=row["verify"];
      resolve();
    });
  });
  return val;
}

async function getreflead(){
  var stmt = "SELECT * FROM users order by verify desc;";
  var val; var arr=[];
  await new Promise((resolve) => {
    db.all(stmt, (err, row) => {
      val=row;
      resolve();
    });
  });

  await new Promise((resolve) => {
    for (var i=0;i<val.length;i++){
      arr.push([val[i]["un"],val[i]["verify"]]);
    } 
    resolve();
  });
  
  return arr;
}



function userIsAllowed(callback) {
  callback(false);
};

io.on('connection',(socket) => {
  socket.on('login',(tn,pwd) => {
    if(accounts[tn] == undefined || accounts[tn]["password"] != md5(pwd)) {
      socket.emit("loginRes",false,-3);
      return;
    }
    socket.emit("loginRes",true,accounts[tn]["rand_id"]);
    return;
  });
});


app.get('/', (req, res) => {
  console.log("aaa");
  session=req.session;
  if (session.userid){
    res.sendFile(__dirname + '/index2.html');
  }
  else{
    res.sendFile(__dirname + '/index.html');
  }
  
});

app.get('/protected/*', function(req, res, next) {
  userIsAllowed(function(allowed) {
    if (allowed) {
      next(); // call the next handler, which in this case is express.static
    } else {
      res.end('You are not allowed!');
    }
  });
});

app.get('/login', (req, res) => {
  session=req.session;
  if (session.userid){
    res.sendFile(__dirname + '/index2.html');
  }
  else{
    res.sendFile(__dirname + '/templates/login.html');
  }
});

app.post('/login', (req, res) => {
  check2(req.body.uname,req.body.pwd).then(result => {
    if (result===1){
      res.sendFile(__dirname + '/error1.html');
    }
    else{
      session=req.session;
      session.userid=req.body.uname;
      res.sendFile(__dirname + '/index2.html');
    }
  });
});

app.get('/register', (req, res) => {
  session=req.session;
  if (session.userid){
    res.sendFile(__dirname + '/index2.html');
  }
  else{
    res.sendFile(__dirname + '/templates/register.html');
  }
});


app.post('/register', (req, res) => {
  check(req.body.username,req.body.email).then(result => {
      if (result===1){
        res.sendFile(__dirname + '/error2.html');
      }
      else{
        var stmt = db.prepare("insert into users values (?, ?, ?, 1,?,?,?);");
        var stmt2=db.prepare("update users set verify=verify+1 where token=?;");
        var stmt3="CREATE table `" +  md5(req.body.username) + "` (chall_name varchar(255), chall_id Varchar(255), time integer);";

        session=req.session;
        session.userid=req.body.username;
        db.run(stmt3);
        stmt.run(req.body.username,md5(req.body.password),req.body.email,req.body.hs==="Highschool",encrypt(req.body.username)["encryptedData"],req.body.ref);
        if (req.body.ref.length!==0){
          stmt2.run(req.body.ref);
        }
        
        res.sendFile(__dirname + '/index2.html');
      }
  });
});

app.get('/logout',(req,res) => {
    req.session.destroy();
    res.redirect('/');
});

app.get('/leaderboard', (req, res) => {
  session=req.session;
  getreflead().then(result => {
      if (session.userid){
        res.render('leaderboard',{res:result});
      }
      else{
        res.sendFile(__dirname + '/index.html');
      }

  });
  
  
  
});

app.get('/team', (req, res) => {
  session=req.session;
  if (session.userid){
    getreferals(session.userid).then(result => {
      res.render('team',{name:session.userid,token:encrypt(session.userid)["encryptedData"],refers:result});
    });
  }
  else{
    res.sendFile(__dirname + '/index.html');
  }

});

app.get('/challenges', (req, res) => {
  session=req.session;
  if (session.userid){
    res.sendFile(__dirname + '/templates/challenges.html');
  }
  else{
    res.sendFile(__dirname + '/index.html');
  }

});

const httpServer = http.createServer(app);
const httpsServer = https.createServer(credentials, app);

httpServer.listen(80, () => {
  console.log('HTTP Server running on port 80');
});

httpsServer.listen(443, () => {
  console.log('HTTPS Server running on port 443');
});
